# Aliases
alias k="kubectl"
alias kx="/usr/local/bin/kubectx"
alias kn="/usr/local/bin/kubens"
alias ke="kubectl exec -it"
alias kl="kubectl logs"
alias kg="kubectl get"
alias ktn="kubectl top no --use-protocol-buffers"
alias ktp="kubectl top pod --use-protocol-buffers"
alias kd="kubectl describe"
alias kni="kubectl get nodes -o=custom-columns=NODE:.metadata.name,MAX_PODS:.status.allocatable.pods,CAPACITY_PODS:.status.capacity.pods,INSTANCE_TYPE:.metadata.labels.\"node\.kubernetes\.io/instance-type\",ARCH:.status.nodeInfo.architecture,NODE_NAME:.metadata.labels.\"kubernetes\.io/hostname\""
alias kgn="kg nodes"
alias kgp="kg pods"
alias kgpa="kgp -A"
alias kgpw="kgp -owide"
alias kgd="kg deployment"
alias kgr="kg rollout"
alias kdp="kd pods"
alias kdd="kd deployment"
alias kdr="kd rollout"
alias kdds="kd daemonset"
alias kgpn="kgp --output=jsonpath={.items..metadata.name}"

# Functions
function kxg() {
    local context_name=$(kubectx | grep $1)
    if [[ ! -z "$context_name" ]]; then
        kubectx "$context_name"
    else
        echo "Context not found."
    fi
}

function kng() {
    local namespace_name=$(kubens | grep $1)
    if [[ ! -z "$namespace_name" ]]; then
        kubens "$namespace_name"
    else
        echo "Namespace not found."
    fi
}

function kep() {
    local pod_name=$(kubectl get pods | grep $1 | awk '{print $1}' | head -n1)
    if [[ ! -z "$pod_name" ]]; then
        if [[ -n "$2" ]]; then
            kubectl exec -it "$pod_name" -- $2
        else
            kubectl exec -it "$pod_name" -- sh -c "clear; echo 'Exec pod: $pod_name'; bash"
        fi
    else
        echo "Pod not found."
    fi
}

function skctl() {
    current_context=$(kubectl config current-context)
    current_namespace=$(kubectl config view --minify --output 'jsonpath={..namespace}')

    echo "Current Kubernetes context: $current_context"
    echo "Current namespace: $current_namespace"
}

function kgpx() {
    kcx $1
    kcns $2
    kubectl get pods
}

function kchk() {
  for eachContext in $(kubectx)
  do
    echo $eachContext
    kubectl get pods --context=$eachContext -A | grep -vP '(Running|Completed|Terminating|ContainerCreating|Init:)'
  done
}

kfz() {
  local command=$1
  shift

  boxit() {
    local line
    while read line; do
      echo "${line#[[:space:]]}"
    done <<< "$1"
  }

  read -r -d '' divider << 'EOF'
    awk '{print} FNR==1 {gsub(/./, "▔", $0); print}'
EOF

  [[ $1 == -- ]] && trap "kfzf \"$command\"" EXIT

  local current_namespace
  current_namespace=$(kubectl config view --minify --output 'jsonpath={..namespace}')

  case "$command" in
    p)
      command='kubectl get pods --sort-by=.metadata.creationTimestamp'
      fzf --exact \
        --header-lines 1 --tac --scheme history \
        --border-label ' PODS ' \
        --prompt "Fuzzy search -> " \
        --header "$(boxit 'Enter (Search logs) │ CTRL-E (kubectl exec) │ CTRL-R (reload)>')" \
        --bind "start:reload:$command" \
        --bind "ctrl-r:reload:$command" \
        --bind 'ctrl-/:change-preview-window(80%,border-bottom|hidden|)' \
        --bind "enter:execute(kubectl logs {1} | fzf --exact --tac)" \
        --bind 'ctrl-e:execute:kubectl exec -it {1} -- bash' \
        --preview-window top,70%,wrap \
        --preview 'kubectl logs --follow --tail=10000 {1}' "$@"
      ;;

    d)
      command='kubectl get deployments'
      fzf --exact \
        --header-lines 1 --tac --scheme history \
        --border-label ' DEPLOYMENTS ' \
        --prompt "Fuzzy search -> " \
        --header "$(boxit 'Enter (Search describe) | CTRL-R (reload)>')" \
        --bind 'enter:ignore' \
        --bind "start:reload:$command" \
        --bind "ctrl-r:reload:$command" \
        --bind "enter:execute(kubectl describe deployment {1} | fzf --tac)" \
        --preview-window top,70%,wrap \
        --preview 'kubectl describe deployments/{1}'
      ;;

    *)
      trap - EXIT
      echo "usage: kfz [p|d]
  d | Check Deployments
  p | Check Pods" | fzf \
        --header-lines 1 --tac --scheme history \
        --border-label ' kfz ' \
        --prompt "-> " \
        --bind "enter:execute(bash -c -i 'kfz {+1}')"
      ;;
  esac
}
